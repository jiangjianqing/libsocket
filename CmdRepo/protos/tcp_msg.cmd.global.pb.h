// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_msg.cmd.global.proto

#ifndef PROTOBUF_tcp_5fmsg_2ecmd_2eglobal_2eproto__INCLUDED
#define PROTOBUF_tcp_5fmsg_2ecmd_2eglobal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tcp_msg.cmd.common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_tcp_5fmsg_2ecmd_2eglobal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIdentifyRequestImpl();
void InitDefaultsIdentifyRequest();
void InitDefaultsIdentifyResponseImpl();
void InitDefaultsIdentifyResponse();
void InitDefaultsStartUpdateRequestImpl();
void InitDefaultsStartUpdateRequest();
inline void InitDefaults() {
  InitDefaultsIdentifyRequest();
  InitDefaultsIdentifyResponse();
  InitDefaultsStartUpdateRequest();
}
}  // namespace protobuf_tcp_5fmsg_2ecmd_2eglobal_2eproto
namespace tcp_msg {
namespace global {
class IdentifyRequest;
class IdentifyRequestDefaultTypeInternal;
extern IdentifyRequestDefaultTypeInternal _IdentifyRequest_default_instance_;
class IdentifyResponse;
class IdentifyResponseDefaultTypeInternal;
extern IdentifyResponseDefaultTypeInternal _IdentifyResponse_default_instance_;
class StartUpdateRequest;
class StartUpdateRequestDefaultTypeInternal;
extern StartUpdateRequestDefaultTypeInternal _StartUpdateRequest_default_instance_;
}  // namespace global
}  // namespace tcp_msg
namespace tcp_msg {
namespace global {

// ===================================================================

class IdentifyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.global.IdentifyRequest) */ {
 public:
  IdentifyRequest();
  virtual ~IdentifyRequest();

  IdentifyRequest(const IdentifyRequest& from);

  inline IdentifyRequest& operator=(const IdentifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentifyRequest(IdentifyRequest&& from) noexcept
    : IdentifyRequest() {
    *this = ::std::move(from);
  }

  inline IdentifyRequest& operator=(IdentifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifyRequest* internal_default_instance() {
    return reinterpret_cast<const IdentifyRequest*>(
               &_IdentifyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(IdentifyRequest* other);
  friend void swap(IdentifyRequest& a, IdentifyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentifyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  IdentifyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IdentifyRequest& from);
  void MergeFrom(const IdentifyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IdentifyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // @@protoc_insertion_point(class_scope:tcp_msg.global.IdentifyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tcp_msg::CommonHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eglobal_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eglobal_2eproto::InitDefaultsIdentifyRequestImpl();
};
// -------------------------------------------------------------------

class IdentifyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.global.IdentifyResponse) */ {
 public:
  IdentifyResponse();
  virtual ~IdentifyResponse();

  IdentifyResponse(const IdentifyResponse& from);

  inline IdentifyResponse& operator=(const IdentifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentifyResponse(IdentifyResponse&& from) noexcept
    : IdentifyResponse() {
    *this = ::std::move(from);
  }

  inline IdentifyResponse& operator=(IdentifyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifyResponse* internal_default_instance() {
    return reinterpret_cast<const IdentifyResponse*>(
               &_IdentifyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IdentifyResponse* other);
  friend void swap(IdentifyResponse& a, IdentifyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentifyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  IdentifyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IdentifyResponse& from);
  void MergeFrom(const IdentifyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IdentifyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tcp_msg.global.IdentifyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tcp_msg::CommonHeader* header_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eglobal_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eglobal_2eproto::InitDefaultsIdentifyResponseImpl();
};
// -------------------------------------------------------------------

class StartUpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.global.StartUpdateRequest) */ {
 public:
  StartUpdateRequest();
  virtual ~StartUpdateRequest();

  StartUpdateRequest(const StartUpdateRequest& from);

  inline StartUpdateRequest& operator=(const StartUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartUpdateRequest(StartUpdateRequest&& from) noexcept
    : StartUpdateRequest() {
    *this = ::std::move(from);
  }

  inline StartUpdateRequest& operator=(StartUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartUpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const StartUpdateRequest*>(
               &_StartUpdateRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StartUpdateRequest* other);
  friend void swap(StartUpdateRequest& a, StartUpdateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartUpdateRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StartUpdateRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartUpdateRequest& from);
  void MergeFrom(const StartUpdateRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartUpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // @@protoc_insertion_point(class_scope:tcp_msg.global.StartUpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tcp_msg::CommonHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eglobal_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eglobal_2eproto::InitDefaultsStartUpdateRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IdentifyRequest

// .tcp_msg.CommonHeader header = 1;
inline bool IdentifyRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& IdentifyRequest::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.global.IdentifyRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* IdentifyRequest::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.global.IdentifyRequest.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* IdentifyRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.global.IdentifyRequest.header)
  return header_;
}
inline void IdentifyRequest::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.global.IdentifyRequest.header)
}

// -------------------------------------------------------------------

// IdentifyResponse

// .tcp_msg.CommonHeader header = 1;
inline bool IdentifyResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& IdentifyResponse::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.global.IdentifyResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* IdentifyResponse::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.global.IdentifyResponse.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* IdentifyResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.global.IdentifyResponse.header)
  return header_;
}
inline void IdentifyResponse::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.global.IdentifyResponse.header)
}

// int32 id = 2;
inline void IdentifyResponse::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 IdentifyResponse::id() const {
  // @@protoc_insertion_point(field_get:tcp_msg.global.IdentifyResponse.id)
  return id_;
}
inline void IdentifyResponse::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tcp_msg.global.IdentifyResponse.id)
}

// -------------------------------------------------------------------

// StartUpdateRequest

// .tcp_msg.CommonHeader header = 1;
inline bool StartUpdateRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& StartUpdateRequest::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.global.StartUpdateRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* StartUpdateRequest::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.global.StartUpdateRequest.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* StartUpdateRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.global.StartUpdateRequest.header)
  return header_;
}
inline void StartUpdateRequest::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.global.StartUpdateRequest.header)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace global
}  // namespace tcp_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tcp_5fmsg_2ecmd_2eglobal_2eproto__INCLUDED
