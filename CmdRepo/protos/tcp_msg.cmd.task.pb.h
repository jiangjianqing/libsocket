// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_msg.cmd.task.proto

#ifndef PROTOBUF_tcp_5fmsg_2ecmd_2etask_2eproto__INCLUDED
#define PROTOBUF_tcp_5fmsg_2ecmd_2etask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "tcp_msg.cmd.common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_tcp_5fmsg_2ecmd_2etask_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsExecuteTaskRequestImpl();
void InitDefaultsExecuteTaskRequest();
void InitDefaultsExecuteTaskResponseImpl();
void InitDefaultsExecuteTaskResponse();
inline void InitDefaults() {
  InitDefaultsExecuteTaskRequest();
  InitDefaultsExecuteTaskResponse();
}
}  // namespace protobuf_tcp_5fmsg_2ecmd_2etask_2eproto
namespace tcp_msg {
namespace task {
class ExecuteTaskRequest;
class ExecuteTaskRequestDefaultTypeInternal;
extern ExecuteTaskRequestDefaultTypeInternal _ExecuteTaskRequest_default_instance_;
class ExecuteTaskResponse;
class ExecuteTaskResponseDefaultTypeInternal;
extern ExecuteTaskResponseDefaultTypeInternal _ExecuteTaskResponse_default_instance_;
}  // namespace task
}  // namespace tcp_msg
namespace tcp_msg {
namespace task {

// ===================================================================

class ExecuteTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.task.ExecuteTaskRequest) */ {
 public:
  ExecuteTaskRequest();
  virtual ~ExecuteTaskRequest();

  ExecuteTaskRequest(const ExecuteTaskRequest& from);

  inline ExecuteTaskRequest& operator=(const ExecuteTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteTaskRequest(ExecuteTaskRequest&& from) noexcept
    : ExecuteTaskRequest() {
    *this = ::std::move(from);
  }

  inline ExecuteTaskRequest& operator=(ExecuteTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteTaskRequest* internal_default_instance() {
    return reinterpret_cast<const ExecuteTaskRequest*>(
               &_ExecuteTaskRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ExecuteTaskRequest* other);
  friend void swap(ExecuteTaskRequest& a, ExecuteTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteTaskRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecuteTaskRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecuteTaskRequest& from);
  void MergeFrom(const ExecuteTaskRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecuteTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string taskname = 2;
  void clear_taskname();
  static const int kTasknameFieldNumber = 2;
  const ::std::string& taskname() const;
  void set_taskname(const ::std::string& value);
  #if LANG_CXX11
  void set_taskname(::std::string&& value);
  #endif
  void set_taskname(const char* value);
  void set_taskname(const char* value, size_t size);
  ::std::string* mutable_taskname();
  ::std::string* release_taskname();
  void set_allocated_taskname(::std::string* taskname);

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // @@protoc_insertion_point(class_scope:tcp_msg.task.ExecuteTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr taskname_;
  ::tcp_msg::CommonHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::InitDefaultsExecuteTaskRequestImpl();
};
// -------------------------------------------------------------------

class ExecuteTaskResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.task.ExecuteTaskResponse) */ {
 public:
  ExecuteTaskResponse();
  virtual ~ExecuteTaskResponse();

  ExecuteTaskResponse(const ExecuteTaskResponse& from);

  inline ExecuteTaskResponse& operator=(const ExecuteTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExecuteTaskResponse(ExecuteTaskResponse&& from) noexcept
    : ExecuteTaskResponse() {
    *this = ::std::move(from);
  }

  inline ExecuteTaskResponse& operator=(ExecuteTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecuteTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteTaskResponse* internal_default_instance() {
    return reinterpret_cast<const ExecuteTaskResponse*>(
               &_ExecuteTaskResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ExecuteTaskResponse* other);
  friend void swap(ExecuteTaskResponse& a, ExecuteTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExecuteTaskResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ExecuteTaskResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ExecuteTaskResponse& from);
  void MergeFrom(const ExecuteTaskResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ExecuteTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tcp_msg.FeedbackInfo result_info = 4;
  int result_info_size() const;
  void clear_result_info();
  static const int kResultInfoFieldNumber = 4;
  const ::tcp_msg::FeedbackInfo& result_info(int index) const;
  ::tcp_msg::FeedbackInfo* mutable_result_info(int index);
  ::tcp_msg::FeedbackInfo* add_result_info();
  ::google::protobuf::RepeatedPtrField< ::tcp_msg::FeedbackInfo >*
      mutable_result_info();
  const ::google::protobuf::RepeatedPtrField< ::tcp_msg::FeedbackInfo >&
      result_info() const;

  // string taskname = 2;
  void clear_taskname();
  static const int kTasknameFieldNumber = 2;
  const ::std::string& taskname() const;
  void set_taskname(const ::std::string& value);
  #if LANG_CXX11
  void set_taskname(::std::string&& value);
  #endif
  void set_taskname(const char* value);
  void set_taskname(const char* value, size_t size);
  ::std::string* mutable_taskname();
  ::std::string* release_taskname();
  void set_allocated_taskname(::std::string* taskname);

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // .tcp_msg.FeedbackType result_type = 3;
  void clear_result_type();
  static const int kResultTypeFieldNumber = 3;
  ::tcp_msg::FeedbackType result_type() const;
  void set_result_type(::tcp_msg::FeedbackType value);

  // @@protoc_insertion_point(class_scope:tcp_msg.task.ExecuteTaskResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tcp_msg::FeedbackInfo > result_info_;
  ::google::protobuf::internal::ArenaStringPtr taskname_;
  ::tcp_msg::CommonHeader* header_;
  int result_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::InitDefaultsExecuteTaskResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExecuteTaskRequest

// .tcp_msg.CommonHeader header = 1;
inline bool ExecuteTaskRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& ExecuteTaskRequest::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.task.ExecuteTaskRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* ExecuteTaskRequest::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.task.ExecuteTaskRequest.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* ExecuteTaskRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.task.ExecuteTaskRequest.header)
  return header_;
}
inline void ExecuteTaskRequest::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.task.ExecuteTaskRequest.header)
}

// string taskname = 2;
inline void ExecuteTaskRequest::clear_taskname() {
  taskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteTaskRequest::taskname() const {
  // @@protoc_insertion_point(field_get:tcp_msg.task.ExecuteTaskRequest.taskname)
  return taskname_.GetNoArena();
}
inline void ExecuteTaskRequest::set_taskname(const ::std::string& value) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcp_msg.task.ExecuteTaskRequest.taskname)
}
#if LANG_CXX11
inline void ExecuteTaskRequest::set_taskname(::std::string&& value) {
  
  taskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcp_msg.task.ExecuteTaskRequest.taskname)
}
#endif
inline void ExecuteTaskRequest::set_taskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcp_msg.task.ExecuteTaskRequest.taskname)
}
inline void ExecuteTaskRequest::set_taskname(const char* value, size_t size) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcp_msg.task.ExecuteTaskRequest.taskname)
}
inline ::std::string* ExecuteTaskRequest::mutable_taskname() {
  
  // @@protoc_insertion_point(field_mutable:tcp_msg.task.ExecuteTaskRequest.taskname)
  return taskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteTaskRequest::release_taskname() {
  // @@protoc_insertion_point(field_release:tcp_msg.task.ExecuteTaskRequest.taskname)
  
  return taskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteTaskRequest::set_allocated_taskname(::std::string* taskname) {
  if (taskname != NULL) {
    
  } else {
    
  }
  taskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskname);
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.task.ExecuteTaskRequest.taskname)
}

// -------------------------------------------------------------------

// ExecuteTaskResponse

// .tcp_msg.CommonHeader header = 1;
inline bool ExecuteTaskResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& ExecuteTaskResponse::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.task.ExecuteTaskResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* ExecuteTaskResponse::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.task.ExecuteTaskResponse.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* ExecuteTaskResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.task.ExecuteTaskResponse.header)
  return header_;
}
inline void ExecuteTaskResponse::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.task.ExecuteTaskResponse.header)
}

// string taskname = 2;
inline void ExecuteTaskResponse::clear_taskname() {
  taskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ExecuteTaskResponse::taskname() const {
  // @@protoc_insertion_point(field_get:tcp_msg.task.ExecuteTaskResponse.taskname)
  return taskname_.GetNoArena();
}
inline void ExecuteTaskResponse::set_taskname(const ::std::string& value) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcp_msg.task.ExecuteTaskResponse.taskname)
}
#if LANG_CXX11
inline void ExecuteTaskResponse::set_taskname(::std::string&& value) {
  
  taskname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcp_msg.task.ExecuteTaskResponse.taskname)
}
#endif
inline void ExecuteTaskResponse::set_taskname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcp_msg.task.ExecuteTaskResponse.taskname)
}
inline void ExecuteTaskResponse::set_taskname(const char* value, size_t size) {
  
  taskname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcp_msg.task.ExecuteTaskResponse.taskname)
}
inline ::std::string* ExecuteTaskResponse::mutable_taskname() {
  
  // @@protoc_insertion_point(field_mutable:tcp_msg.task.ExecuteTaskResponse.taskname)
  return taskname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExecuteTaskResponse::release_taskname() {
  // @@protoc_insertion_point(field_release:tcp_msg.task.ExecuteTaskResponse.taskname)
  
  return taskname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExecuteTaskResponse::set_allocated_taskname(::std::string* taskname) {
  if (taskname != NULL) {
    
  } else {
    
  }
  taskname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskname);
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.task.ExecuteTaskResponse.taskname)
}

// .tcp_msg.FeedbackType result_type = 3;
inline void ExecuteTaskResponse::clear_result_type() {
  result_type_ = 0;
}
inline ::tcp_msg::FeedbackType ExecuteTaskResponse::result_type() const {
  // @@protoc_insertion_point(field_get:tcp_msg.task.ExecuteTaskResponse.result_type)
  return static_cast< ::tcp_msg::FeedbackType >(result_type_);
}
inline void ExecuteTaskResponse::set_result_type(::tcp_msg::FeedbackType value) {
  
  result_type_ = value;
  // @@protoc_insertion_point(field_set:tcp_msg.task.ExecuteTaskResponse.result_type)
}

// repeated .tcp_msg.FeedbackInfo result_info = 4;
inline int ExecuteTaskResponse::result_info_size() const {
  return result_info_.size();
}
inline const ::tcp_msg::FeedbackInfo& ExecuteTaskResponse::result_info(int index) const {
  // @@protoc_insertion_point(field_get:tcp_msg.task.ExecuteTaskResponse.result_info)
  return result_info_.Get(index);
}
inline ::tcp_msg::FeedbackInfo* ExecuteTaskResponse::mutable_result_info(int index) {
  // @@protoc_insertion_point(field_mutable:tcp_msg.task.ExecuteTaskResponse.result_info)
  return result_info_.Mutable(index);
}
inline ::tcp_msg::FeedbackInfo* ExecuteTaskResponse::add_result_info() {
  // @@protoc_insertion_point(field_add:tcp_msg.task.ExecuteTaskResponse.result_info)
  return result_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tcp_msg::FeedbackInfo >*
ExecuteTaskResponse::mutable_result_info() {
  // @@protoc_insertion_point(field_mutable_list:tcp_msg.task.ExecuteTaskResponse.result_info)
  return &result_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tcp_msg::FeedbackInfo >&
ExecuteTaskResponse::result_info() const {
  // @@protoc_insertion_point(field_list:tcp_msg.task.ExecuteTaskResponse.result_info)
  return result_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace task
}  // namespace tcp_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tcp_5fmsg_2ecmd_2etask_2eproto__INCLUDED
