// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_msg.cmd.file.proto

#ifndef PROTOBUF_tcp_5fmsg_2ecmd_2efile_2eproto__INCLUDED
#define PROTOBUF_tcp_5fmsg_2ecmd_2efile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "tcp_msg.cmd.common.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_tcp_5fmsg_2ecmd_2efile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFileListRequestImpl();
void InitDefaultsFileListRequest();
void InitDefaultsFileInfoImpl();
void InitDefaultsFileInfo();
void InitDefaultsFileListResponseImpl();
void InitDefaultsFileListResponse();
void InitDefaultsSendFileRequestImpl();
void InitDefaultsSendFileRequest();
void InitDefaultsSendFileResponseImpl();
void InitDefaultsSendFileResponse();
inline void InitDefaults() {
  InitDefaultsFileListRequest();
  InitDefaultsFileInfo();
  InitDefaultsFileListResponse();
  InitDefaultsSendFileRequest();
  InitDefaultsSendFileResponse();
}
}  // namespace protobuf_tcp_5fmsg_2ecmd_2efile_2eproto
namespace tcp_msg {
namespace file {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class FileListRequest;
class FileListRequestDefaultTypeInternal;
extern FileListRequestDefaultTypeInternal _FileListRequest_default_instance_;
class FileListResponse;
class FileListResponseDefaultTypeInternal;
extern FileListResponseDefaultTypeInternal _FileListResponse_default_instance_;
class SendFileRequest;
class SendFileRequestDefaultTypeInternal;
extern SendFileRequestDefaultTypeInternal _SendFileRequest_default_instance_;
class SendFileResponse;
class SendFileResponseDefaultTypeInternal;
extern SendFileResponseDefaultTypeInternal _SendFileResponse_default_instance_;
}  // namespace file
}  // namespace tcp_msg
namespace tcp_msg {
namespace file {

enum SendFileResponse_FileType {
  SendFileResponse_FileType_UNKNOW_FILE_TYPE = 0,
  SendFileResponse_FileType_SYSTEM = 1,
  SendFileResponse_FileType_TEMP = 2,
  SendFileResponse_FileType_SendFileResponse_FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SendFileResponse_FileType_SendFileResponse_FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SendFileResponse_FileType_IsValid(int value);
const SendFileResponse_FileType SendFileResponse_FileType_FileType_MIN = SendFileResponse_FileType_UNKNOW_FILE_TYPE;
const SendFileResponse_FileType SendFileResponse_FileType_FileType_MAX = SendFileResponse_FileType_TEMP;
const int SendFileResponse_FileType_FileType_ARRAYSIZE = SendFileResponse_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SendFileResponse_FileType_descriptor();
inline const ::std::string& SendFileResponse_FileType_Name(SendFileResponse_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SendFileResponse_FileType_descriptor(), value);
}
inline bool SendFileResponse_FileType_Parse(
    const ::std::string& name, SendFileResponse_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SendFileResponse_FileType>(
    SendFileResponse_FileType_descriptor(), name, value);
}
enum SendFileResponse_SendFileResult {
  SendFileResponse_SendFileResult_UNKNOW_SEND_FILE_RESULT = 0,
  SendFileResponse_SendFileResult_NOTFOUND = 1,
  SendFileResponse_SendFileResult_WHOLE = 2,
  SendFileResponse_SendFileResult_PART = 3,
  SendFileResponse_SendFileResult_SendFileResponse_SendFileResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SendFileResponse_SendFileResult_SendFileResponse_SendFileResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SendFileResponse_SendFileResult_IsValid(int value);
const SendFileResponse_SendFileResult SendFileResponse_SendFileResult_SendFileResult_MIN = SendFileResponse_SendFileResult_UNKNOW_SEND_FILE_RESULT;
const SendFileResponse_SendFileResult SendFileResponse_SendFileResult_SendFileResult_MAX = SendFileResponse_SendFileResult_PART;
const int SendFileResponse_SendFileResult_SendFileResult_ARRAYSIZE = SendFileResponse_SendFileResult_SendFileResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* SendFileResponse_SendFileResult_descriptor();
inline const ::std::string& SendFileResponse_SendFileResult_Name(SendFileResponse_SendFileResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    SendFileResponse_SendFileResult_descriptor(), value);
}
inline bool SendFileResponse_SendFileResult_Parse(
    const ::std::string& name, SendFileResponse_SendFileResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SendFileResponse_SendFileResult>(
    SendFileResponse_SendFileResult_descriptor(), name, value);
}
// ===================================================================

class FileListRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.file.FileListRequest) */ {
 public:
  FileListRequest();
  virtual ~FileListRequest();

  FileListRequest(const FileListRequest& from);

  inline FileListRequest& operator=(const FileListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileListRequest(FileListRequest&& from) noexcept
    : FileListRequest() {
    *this = ::std::move(from);
  }

  inline FileListRequest& operator=(FileListRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileListRequest* internal_default_instance() {
    return reinterpret_cast<const FileListRequest*>(
               &_FileListRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FileListRequest* other);
  friend void swap(FileListRequest& a, FileListRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileListRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  FileListRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileListRequest& from);
  void MergeFrom(const FileListRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tcp_msg.file.FileListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tcp_msg::CommonHeader* header_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileListRequestImpl();
};
// -------------------------------------------------------------------

class FileInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.file.FileInfo) */ {
 public:
  FileInfo();
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FileInfo* other);
  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FileInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:tcp_msg.file.FileInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileInfoImpl();
};
// -------------------------------------------------------------------

class FileListResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.file.FileListResponse) */ {
 public:
  FileListResponse();
  virtual ~FileListResponse();

  FileListResponse(const FileListResponse& from);

  inline FileListResponse& operator=(const FileListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileListResponse(FileListResponse&& from) noexcept
    : FileListResponse() {
    *this = ::std::move(from);
  }

  inline FileListResponse& operator=(FileListResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileListResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileListResponse* internal_default_instance() {
    return reinterpret_cast<const FileListResponse*>(
               &_FileListResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FileListResponse* other);
  friend void swap(FileListResponse& a, FileListResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileListResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  FileListResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FileListResponse& from);
  void MergeFrom(const FileListResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FileListResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tcp_msg.file.FileInfo fileinfo = 2;
  int fileinfo_size() const;
  void clear_fileinfo();
  static const int kFileinfoFieldNumber = 2;
  const ::tcp_msg::file::FileInfo& fileinfo(int index) const;
  ::tcp_msg::file::FileInfo* mutable_fileinfo(int index);
  ::tcp_msg::file::FileInfo* add_fileinfo();
  ::google::protobuf::RepeatedPtrField< ::tcp_msg::file::FileInfo >*
      mutable_fileinfo();
  const ::google::protobuf::RepeatedPtrField< ::tcp_msg::file::FileInfo >&
      fileinfo() const;

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // @@protoc_insertion_point(class_scope:tcp_msg.file.FileListResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tcp_msg::file::FileInfo > fileinfo_;
  ::tcp_msg::CommonHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileListResponseImpl();
};
// -------------------------------------------------------------------

class SendFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.file.SendFileRequest) */ {
 public:
  SendFileRequest();
  virtual ~SendFileRequest();

  SendFileRequest(const SendFileRequest& from);

  inline SendFileRequest& operator=(const SendFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFileRequest(SendFileRequest&& from) noexcept
    : SendFileRequest() {
    *this = ::std::move(from);
  }

  inline SendFileRequest& operator=(SendFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFileRequest* internal_default_instance() {
    return reinterpret_cast<const SendFileRequest*>(
               &_SendFileRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(SendFileRequest* other);
  friend void swap(SendFileRequest& a, SendFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFileRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SendFileRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendFileRequest& from);
  void MergeFrom(const SendFileRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 2;
  void clear_filename();
  static const int kFilenameFieldNumber = 2;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // @@protoc_insertion_point(class_scope:tcp_msg.file.SendFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::tcp_msg::CommonHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsSendFileRequestImpl();
};
// -------------------------------------------------------------------

class SendFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.file.SendFileResponse) */ {
 public:
  SendFileResponse();
  virtual ~SendFileResponse();

  SendFileResponse(const SendFileResponse& from);

  inline SendFileResponse& operator=(const SendFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFileResponse(SendFileResponse&& from) noexcept
    : SendFileResponse() {
    *this = ::std::move(from);
  }

  inline SendFileResponse& operator=(SendFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFileResponse* internal_default_instance() {
    return reinterpret_cast<const SendFileResponse*>(
               &_SendFileResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SendFileResponse* other);
  friend void swap(SendFileResponse& a, SendFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFileResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SendFileResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendFileResponse& from);
  void MergeFrom(const SendFileResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SendFileResponse_FileType FileType;
  static const FileType UNKNOW_FILE_TYPE =
    SendFileResponse_FileType_UNKNOW_FILE_TYPE;
  static const FileType SYSTEM =
    SendFileResponse_FileType_SYSTEM;
  static const FileType TEMP =
    SendFileResponse_FileType_TEMP;
  static inline bool FileType_IsValid(int value) {
    return SendFileResponse_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    SendFileResponse_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    SendFileResponse_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    SendFileResponse_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return SendFileResponse_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return SendFileResponse_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return SendFileResponse_FileType_Parse(name, value);
  }

  typedef SendFileResponse_SendFileResult SendFileResult;
  static const SendFileResult UNKNOW_SEND_FILE_RESULT =
    SendFileResponse_SendFileResult_UNKNOW_SEND_FILE_RESULT;
  static const SendFileResult NOTFOUND =
    SendFileResponse_SendFileResult_NOTFOUND;
  static const SendFileResult WHOLE =
    SendFileResponse_SendFileResult_WHOLE;
  static const SendFileResult PART =
    SendFileResponse_SendFileResult_PART;
  static inline bool SendFileResult_IsValid(int value) {
    return SendFileResponse_SendFileResult_IsValid(value);
  }
  static const SendFileResult SendFileResult_MIN =
    SendFileResponse_SendFileResult_SendFileResult_MIN;
  static const SendFileResult SendFileResult_MAX =
    SendFileResponse_SendFileResult_SendFileResult_MAX;
  static const int SendFileResult_ARRAYSIZE =
    SendFileResponse_SendFileResult_SendFileResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SendFileResult_descriptor() {
    return SendFileResponse_SendFileResult_descriptor();
  }
  static inline const ::std::string& SendFileResult_Name(SendFileResult value) {
    return SendFileResponse_SendFileResult_Name(value);
  }
  static inline bool SendFileResult_Parse(const ::std::string& name,
      SendFileResult* value) {
    return SendFileResponse_SendFileResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string filename = 4;
  void clear_filename();
  static const int kFilenameFieldNumber = 4;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes content = 5;
  void clear_content();
  static const int kContentFieldNumber = 5;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // .tcp_msg.file.SendFileResponse.SendFileResult result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  ::tcp_msg::file::SendFileResponse_SendFileResult result() const;
  void set_result(::tcp_msg::file::SendFileResponse_SendFileResult value);

  // .tcp_msg.file.SendFileResponse.FileType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::tcp_msg::file::SendFileResponse_FileType type() const;
  void set_type(::tcp_msg::file::SendFileResponse_FileType value);

  // @@protoc_insertion_point(class_scope:tcp_msg.file.SendFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::tcp_msg::CommonHeader* header_;
  int result_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsSendFileResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileListRequest

// .tcp_msg.CommonHeader header = 1;
inline bool FileListRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& FileListRequest::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.file.FileListRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* FileListRequest::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.file.FileListRequest.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* FileListRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.FileListRequest.header)
  return header_;
}
inline void FileListRequest::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.file.FileListRequest.header)
}

// int32 id = 2;
inline void FileListRequest::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 FileListRequest::id() const {
  // @@protoc_insertion_point(field_get:tcp_msg.file.FileListRequest.id)
  return id_;
}
inline void FileListRequest::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tcp_msg.file.FileListRequest.id)
}

// -------------------------------------------------------------------

// FileInfo

// string filename = 1;
inline void FileInfo::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileInfo::filename() const {
  // @@protoc_insertion_point(field_get:tcp_msg.file.FileInfo.filename)
  return filename_.GetNoArena();
}
inline void FileInfo::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcp_msg.file.FileInfo.filename)
}
#if LANG_CXX11
inline void FileInfo::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcp_msg.file.FileInfo.filename)
}
#endif
inline void FileInfo::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcp_msg.file.FileInfo.filename)
}
inline void FileInfo::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcp_msg.file.FileInfo.filename)
}
inline ::std::string* FileInfo::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.FileInfo.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileInfo::release_filename() {
  // @@protoc_insertion_point(field_release:tcp_msg.file.FileInfo.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileInfo::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.file.FileInfo.filename)
}

// -------------------------------------------------------------------

// FileListResponse

// .tcp_msg.CommonHeader header = 1;
inline bool FileListResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& FileListResponse::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.file.FileListResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* FileListResponse::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.file.FileListResponse.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* FileListResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.FileListResponse.header)
  return header_;
}
inline void FileListResponse::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.file.FileListResponse.header)
}

// repeated .tcp_msg.file.FileInfo fileinfo = 2;
inline int FileListResponse::fileinfo_size() const {
  return fileinfo_.size();
}
inline void FileListResponse::clear_fileinfo() {
  fileinfo_.Clear();
}
inline const ::tcp_msg::file::FileInfo& FileListResponse::fileinfo(int index) const {
  // @@protoc_insertion_point(field_get:tcp_msg.file.FileListResponse.fileinfo)
  return fileinfo_.Get(index);
}
inline ::tcp_msg::file::FileInfo* FileListResponse::mutable_fileinfo(int index) {
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.FileListResponse.fileinfo)
  return fileinfo_.Mutable(index);
}
inline ::tcp_msg::file::FileInfo* FileListResponse::add_fileinfo() {
  // @@protoc_insertion_point(field_add:tcp_msg.file.FileListResponse.fileinfo)
  return fileinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tcp_msg::file::FileInfo >*
FileListResponse::mutable_fileinfo() {
  // @@protoc_insertion_point(field_mutable_list:tcp_msg.file.FileListResponse.fileinfo)
  return &fileinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tcp_msg::file::FileInfo >&
FileListResponse::fileinfo() const {
  // @@protoc_insertion_point(field_list:tcp_msg.file.FileListResponse.fileinfo)
  return fileinfo_;
}

// -------------------------------------------------------------------

// SendFileRequest

// .tcp_msg.CommonHeader header = 1;
inline bool SendFileRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& SendFileRequest::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.file.SendFileRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* SendFileRequest::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.file.SendFileRequest.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* SendFileRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.SendFileRequest.header)
  return header_;
}
inline void SendFileRequest::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.file.SendFileRequest.header)
}

// string filename = 2;
inline void SendFileRequest::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFileRequest::filename() const {
  // @@protoc_insertion_point(field_get:tcp_msg.file.SendFileRequest.filename)
  return filename_.GetNoArena();
}
inline void SendFileRequest::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcp_msg.file.SendFileRequest.filename)
}
#if LANG_CXX11
inline void SendFileRequest::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcp_msg.file.SendFileRequest.filename)
}
#endif
inline void SendFileRequest::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcp_msg.file.SendFileRequest.filename)
}
inline void SendFileRequest::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcp_msg.file.SendFileRequest.filename)
}
inline ::std::string* SendFileRequest::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.SendFileRequest.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFileRequest::release_filename() {
  // @@protoc_insertion_point(field_release:tcp_msg.file.SendFileRequest.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFileRequest::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.file.SendFileRequest.filename)
}

// -------------------------------------------------------------------

// SendFileResponse

// .tcp_msg.CommonHeader header = 1;
inline bool SendFileResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::tcp_msg::CommonHeader& SendFileResponse::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.file.SendFileResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* SendFileResponse::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.file.SendFileResponse.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* SendFileResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.SendFileResponse.header)
  return header_;
}
inline void SendFileResponse::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.file.SendFileResponse.header)
}

// .tcp_msg.file.SendFileResponse.SendFileResult result = 2;
inline void SendFileResponse::clear_result() {
  result_ = 0;
}
inline ::tcp_msg::file::SendFileResponse_SendFileResult SendFileResponse::result() const {
  // @@protoc_insertion_point(field_get:tcp_msg.file.SendFileResponse.result)
  return static_cast< ::tcp_msg::file::SendFileResponse_SendFileResult >(result_);
}
inline void SendFileResponse::set_result(::tcp_msg::file::SendFileResponse_SendFileResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:tcp_msg.file.SendFileResponse.result)
}

// .tcp_msg.file.SendFileResponse.FileType type = 3;
inline void SendFileResponse::clear_type() {
  type_ = 0;
}
inline ::tcp_msg::file::SendFileResponse_FileType SendFileResponse::type() const {
  // @@protoc_insertion_point(field_get:tcp_msg.file.SendFileResponse.type)
  return static_cast< ::tcp_msg::file::SendFileResponse_FileType >(type_);
}
inline void SendFileResponse::set_type(::tcp_msg::file::SendFileResponse_FileType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tcp_msg.file.SendFileResponse.type)
}

// string filename = 4;
inline void SendFileResponse::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFileResponse::filename() const {
  // @@protoc_insertion_point(field_get:tcp_msg.file.SendFileResponse.filename)
  return filename_.GetNoArena();
}
inline void SendFileResponse::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcp_msg.file.SendFileResponse.filename)
}
#if LANG_CXX11
inline void SendFileResponse::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcp_msg.file.SendFileResponse.filename)
}
#endif
inline void SendFileResponse::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcp_msg.file.SendFileResponse.filename)
}
inline void SendFileResponse::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcp_msg.file.SendFileResponse.filename)
}
inline ::std::string* SendFileResponse::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.SendFileResponse.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFileResponse::release_filename() {
  // @@protoc_insertion_point(field_release:tcp_msg.file.SendFileResponse.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFileResponse::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.file.SendFileResponse.filename)
}

// bytes content = 5;
inline void SendFileResponse::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFileResponse::content() const {
  // @@protoc_insertion_point(field_get:tcp_msg.file.SendFileResponse.content)
  return content_.GetNoArena();
}
inline void SendFileResponse::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcp_msg.file.SendFileResponse.content)
}
#if LANG_CXX11
inline void SendFileResponse::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcp_msg.file.SendFileResponse.content)
}
#endif
inline void SendFileResponse::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcp_msg.file.SendFileResponse.content)
}
inline void SendFileResponse::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcp_msg.file.SendFileResponse.content)
}
inline ::std::string* SendFileResponse::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:tcp_msg.file.SendFileResponse.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFileResponse::release_content() {
  // @@protoc_insertion_point(field_release:tcp_msg.file.SendFileResponse.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFileResponse::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.file.SendFileResponse.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace file
}  // namespace tcp_msg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tcp_msg::file::SendFileResponse_FileType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tcp_msg::file::SendFileResponse_FileType>() {
  return ::tcp_msg::file::SendFileResponse_FileType_descriptor();
}
template <> struct is_proto_enum< ::tcp_msg::file::SendFileResponse_SendFileResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tcp_msg::file::SendFileResponse_SendFileResult>() {
  return ::tcp_msg::file::SendFileResponse_SendFileResult_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tcp_5fmsg_2ecmd_2efile_2eproto__INCLUDED
