// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_msg.cmd.proto

#ifndef PROTOBUF_tcp_5fmsg_2ecmd_2eproto__INCLUDED
#define PROTOBUF_tcp_5fmsg_2ecmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_tcp_5fmsg_2ecmd_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCommonHeaderImpl();
void InitDefaultsCommonHeader();
void InitDefaultsIdentifyRequestImpl();
void InitDefaultsIdentifyRequest();
void InitDefaultsIdentifyResponseImpl();
void InitDefaultsIdentifyResponse();
void InitDefaultsStartUpdateImpl();
void InitDefaultsStartUpdate();
void InitDefaultsFinishUpdateImpl();
void InitDefaultsFinishUpdate();
void InitDefaultsSendFileImpl();
void InitDefaultsSendFile();
inline void InitDefaults() {
  InitDefaultsCommonHeader();
  InitDefaultsIdentifyRequest();
  InitDefaultsIdentifyResponse();
  InitDefaultsStartUpdate();
  InitDefaultsFinishUpdate();
  InitDefaultsSendFile();
}
}  // namespace protobuf_tcp_5fmsg_2ecmd_2eproto
namespace tcp_msg {
class CommonHeader;
class CommonHeaderDefaultTypeInternal;
extern CommonHeaderDefaultTypeInternal _CommonHeader_default_instance_;
class FinishUpdate;
class FinishUpdateDefaultTypeInternal;
extern FinishUpdateDefaultTypeInternal _FinishUpdate_default_instance_;
class IdentifyRequest;
class IdentifyRequestDefaultTypeInternal;
extern IdentifyRequestDefaultTypeInternal _IdentifyRequest_default_instance_;
class IdentifyResponse;
class IdentifyResponseDefaultTypeInternal;
extern IdentifyResponseDefaultTypeInternal _IdentifyResponse_default_instance_;
class SendFile;
class SendFileDefaultTypeInternal;
extern SendFileDefaultTypeInternal _SendFile_default_instance_;
class StartUpdate;
class StartUpdateDefaultTypeInternal;
extern StartUpdateDefaultTypeInternal _StartUpdate_default_instance_;
}  // namespace tcp_msg
namespace tcp_msg {

enum SendFile_FileType {
  SendFile_FileType_SYSTEM = 0,
  SendFile_FileType_TEMP = 1,
  SendFile_FileType_SendFile_FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SendFile_FileType_SendFile_FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SendFile_FileType_IsValid(int value);
const SendFile_FileType SendFile_FileType_FileType_MIN = SendFile_FileType_SYSTEM;
const SendFile_FileType SendFile_FileType_FileType_MAX = SendFile_FileType_TEMP;
const int SendFile_FileType_FileType_ARRAYSIZE = SendFile_FileType_FileType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SendFile_FileType_descriptor();
inline const ::std::string& SendFile_FileType_Name(SendFile_FileType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SendFile_FileType_descriptor(), value);
}
inline bool SendFile_FileType_Parse(
    const ::std::string& name, SendFile_FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SendFile_FileType>(
    SendFile_FileType_descriptor(), name, value);
}
enum CmdType {
  START_UPDATE = 0,
  FINISH_UPDATE = 1,
  CmdType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CmdType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CmdType_IsValid(int value);
const CmdType CmdType_MIN = START_UPDATE;
const CmdType CmdType_MAX = FINISH_UPDATE;
const int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CmdType_descriptor();
inline const ::std::string& CmdType_Name(CmdType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CmdType_descriptor(), value);
}
inline bool CmdType_Parse(
    const ::std::string& name, CmdType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
// ===================================================================

class CommonHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.CommonHeader) */ {
 public:
  CommonHeader();
  virtual ~CommonHeader();

  CommonHeader(const CommonHeader& from);

  inline CommonHeader& operator=(const CommonHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CommonHeader(CommonHeader&& from) noexcept
    : CommonHeader() {
    *this = ::std::move(from);
  }

  inline CommonHeader& operator=(CommonHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommonHeader* internal_default_instance() {
    return reinterpret_cast<const CommonHeader*>(
               &_CommonHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CommonHeader* other);
  friend void swap(CommonHeader& a, CommonHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CommonHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  CommonHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CommonHeader& from);
  void MergeFrom(const CommonHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CommonHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CmdType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::tcp_msg::CmdType type() const;
  void set_type(::tcp_msg::CmdType value);

  // @@protoc_insertion_point(class_scope:tcp_msg.CommonHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsCommonHeaderImpl();
};
// -------------------------------------------------------------------

class IdentifyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.IdentifyRequest) */ {
 public:
  IdentifyRequest();
  virtual ~IdentifyRequest();

  IdentifyRequest(const IdentifyRequest& from);

  inline IdentifyRequest& operator=(const IdentifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentifyRequest(IdentifyRequest&& from) noexcept
    : IdentifyRequest() {
    *this = ::std::move(from);
  }

  inline IdentifyRequest& operator=(IdentifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifyRequest* internal_default_instance() {
    return reinterpret_cast<const IdentifyRequest*>(
               &_IdentifyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(IdentifyRequest* other);
  friend void swap(IdentifyRequest& a, IdentifyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentifyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  IdentifyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IdentifyRequest& from);
  void MergeFrom(const IdentifyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IdentifyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // @@protoc_insertion_point(class_scope:tcp_msg.IdentifyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tcp_msg::CommonHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsIdentifyRequestImpl();
};
// -------------------------------------------------------------------

class IdentifyResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.IdentifyResponse) */ {
 public:
  IdentifyResponse();
  virtual ~IdentifyResponse();

  IdentifyResponse(const IdentifyResponse& from);

  inline IdentifyResponse& operator=(const IdentifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentifyResponse(IdentifyResponse&& from) noexcept
    : IdentifyResponse() {
    *this = ::std::move(from);
  }

  inline IdentifyResponse& operator=(IdentifyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentifyResponse* internal_default_instance() {
    return reinterpret_cast<const IdentifyResponse*>(
               &_IdentifyResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(IdentifyResponse* other);
  friend void swap(IdentifyResponse& a, IdentifyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentifyResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  IdentifyResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IdentifyResponse& from);
  void MergeFrom(const IdentifyResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IdentifyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tcp_msg.IdentifyResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tcp_msg::CommonHeader* header_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsIdentifyResponseImpl();
};
// -------------------------------------------------------------------

class StartUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.StartUpdate) */ {
 public:
  StartUpdate();
  virtual ~StartUpdate();

  StartUpdate(const StartUpdate& from);

  inline StartUpdate& operator=(const StartUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartUpdate(StartUpdate&& from) noexcept
    : StartUpdate() {
    *this = ::std::move(from);
  }

  inline StartUpdate& operator=(StartUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartUpdate* internal_default_instance() {
    return reinterpret_cast<const StartUpdate*>(
               &_StartUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(StartUpdate* other);
  friend void swap(StartUpdate& a, StartUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  StartUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartUpdate& from);
  void MergeFrom(const StartUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // @@protoc_insertion_point(class_scope:tcp_msg.StartUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tcp_msg::CommonHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsStartUpdateImpl();
};
// -------------------------------------------------------------------

class FinishUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.FinishUpdate) */ {
 public:
  FinishUpdate();
  virtual ~FinishUpdate();

  FinishUpdate(const FinishUpdate& from);

  inline FinishUpdate& operator=(const FinishUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FinishUpdate(FinishUpdate&& from) noexcept
    : FinishUpdate() {
    *this = ::std::move(from);
  }

  inline FinishUpdate& operator=(FinishUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FinishUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FinishUpdate* internal_default_instance() {
    return reinterpret_cast<const FinishUpdate*>(
               &_FinishUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FinishUpdate* other);
  friend void swap(FinishUpdate& a, FinishUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FinishUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  FinishUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FinishUpdate& from);
  void MergeFrom(const FinishUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FinishUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // @@protoc_insertion_point(class_scope:tcp_msg.FinishUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::tcp_msg::CommonHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsFinishUpdateImpl();
};
// -------------------------------------------------------------------

class SendFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tcp_msg.SendFile) */ {
 public:
  SendFile();
  virtual ~SendFile();

  SendFile(const SendFile& from);

  inline SendFile& operator=(const SendFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendFile(SendFile&& from) noexcept
    : SendFile() {
    *this = ::std::move(from);
  }

  inline SendFile& operator=(SendFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendFile* internal_default_instance() {
    return reinterpret_cast<const SendFile*>(
               &_SendFile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(SendFile* other);
  friend void swap(SendFile& a, SendFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendFile* New() const PROTOBUF_FINAL { return New(NULL); }

  SendFile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SendFile& from);
  void MergeFrom(const SendFile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SendFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SendFile_FileType FileType;
  static const FileType SYSTEM =
    SendFile_FileType_SYSTEM;
  static const FileType TEMP =
    SendFile_FileType_TEMP;
  static inline bool FileType_IsValid(int value) {
    return SendFile_FileType_IsValid(value);
  }
  static const FileType FileType_MIN =
    SendFile_FileType_FileType_MIN;
  static const FileType FileType_MAX =
    SendFile_FileType_FileType_MAX;
  static const int FileType_ARRAYSIZE =
    SendFile_FileType_FileType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FileType_descriptor() {
    return SendFile_FileType_descriptor();
  }
  static inline const ::std::string& FileType_Name(FileType value) {
    return SendFile_FileType_Name(value);
  }
  static inline bool FileType_Parse(const ::std::string& name,
      FileType* value) {
    return SendFile_FileType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // bytes content = 4;
  void clear_content();
  static const int kContentFieldNumber = 4;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .tcp_msg.CommonHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::tcp_msg::CommonHeader& header() const;
  ::tcp_msg::CommonHeader* release_header();
  ::tcp_msg::CommonHeader* mutable_header();
  void set_allocated_header(::tcp_msg::CommonHeader* header);

  // .tcp_msg.SendFile.FileType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::tcp_msg::SendFile_FileType type() const;
  void set_type(::tcp_msg::SendFile_FileType value);

  // @@protoc_insertion_point(class_scope:tcp_msg.SendFile)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  ::tcp_msg::CommonHeader* header_;
  int type_;
  mutable int _cached_size_;
  friend struct ::protobuf_tcp_5fmsg_2ecmd_2eproto::TableStruct;
  friend void ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsSendFileImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommonHeader

// .tcp_msg.CmdType type = 1;
inline void CommonHeader::clear_type() {
  type_ = 0;
}
inline ::tcp_msg::CmdType CommonHeader::type() const {
  // @@protoc_insertion_point(field_get:tcp_msg.CommonHeader.type)
  return static_cast< ::tcp_msg::CmdType >(type_);
}
inline void CommonHeader::set_type(::tcp_msg::CmdType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tcp_msg.CommonHeader.type)
}

// -------------------------------------------------------------------

// IdentifyRequest

// .tcp_msg.CommonHeader header = 1;
inline bool IdentifyRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void IdentifyRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::tcp_msg::CommonHeader& IdentifyRequest::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.IdentifyRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* IdentifyRequest::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.IdentifyRequest.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* IdentifyRequest::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.IdentifyRequest.header)
  return header_;
}
inline void IdentifyRequest::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.IdentifyRequest.header)
}

// -------------------------------------------------------------------

// IdentifyResponse

// .tcp_msg.CommonHeader header = 1;
inline bool IdentifyResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void IdentifyResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::tcp_msg::CommonHeader& IdentifyResponse::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.IdentifyResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* IdentifyResponse::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.IdentifyResponse.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* IdentifyResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.IdentifyResponse.header)
  return header_;
}
inline void IdentifyResponse::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.IdentifyResponse.header)
}

// int32 id = 2;
inline void IdentifyResponse::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 IdentifyResponse::id() const {
  // @@protoc_insertion_point(field_get:tcp_msg.IdentifyResponse.id)
  return id_;
}
inline void IdentifyResponse::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:tcp_msg.IdentifyResponse.id)
}

// -------------------------------------------------------------------

// StartUpdate

// .tcp_msg.CommonHeader header = 1;
inline bool StartUpdate::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void StartUpdate::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::tcp_msg::CommonHeader& StartUpdate::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.StartUpdate.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* StartUpdate::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.StartUpdate.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* StartUpdate::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.StartUpdate.header)
  return header_;
}
inline void StartUpdate::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.StartUpdate.header)
}

// -------------------------------------------------------------------

// FinishUpdate

// .tcp_msg.CommonHeader header = 1;
inline bool FinishUpdate::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void FinishUpdate::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::tcp_msg::CommonHeader& FinishUpdate::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.FinishUpdate.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* FinishUpdate::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.FinishUpdate.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* FinishUpdate::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.FinishUpdate.header)
  return header_;
}
inline void FinishUpdate::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.FinishUpdate.header)
}

// -------------------------------------------------------------------

// SendFile

// .tcp_msg.CommonHeader header = 1;
inline bool SendFile::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void SendFile::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::tcp_msg::CommonHeader& SendFile::header() const {
  const ::tcp_msg::CommonHeader* p = header_;
  // @@protoc_insertion_point(field_get:tcp_msg.SendFile.header)
  return p != NULL ? *p : *reinterpret_cast<const ::tcp_msg::CommonHeader*>(
      &::tcp_msg::_CommonHeader_default_instance_);
}
inline ::tcp_msg::CommonHeader* SendFile::release_header() {
  // @@protoc_insertion_point(field_release:tcp_msg.SendFile.header)
  
  ::tcp_msg::CommonHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::tcp_msg::CommonHeader* SendFile::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::tcp_msg::CommonHeader;
  }
  // @@protoc_insertion_point(field_mutable:tcp_msg.SendFile.header)
  return header_;
}
inline void SendFile::set_allocated_header(::tcp_msg::CommonHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.SendFile.header)
}

// .tcp_msg.SendFile.FileType type = 2;
inline void SendFile::clear_type() {
  type_ = 0;
}
inline ::tcp_msg::SendFile_FileType SendFile::type() const {
  // @@protoc_insertion_point(field_get:tcp_msg.SendFile.type)
  return static_cast< ::tcp_msg::SendFile_FileType >(type_);
}
inline void SendFile::set_type(::tcp_msg::SendFile_FileType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:tcp_msg.SendFile.type)
}

// string filename = 3;
inline void SendFile::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFile::filename() const {
  // @@protoc_insertion_point(field_get:tcp_msg.SendFile.filename)
  return filename_.GetNoArena();
}
inline void SendFile::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcp_msg.SendFile.filename)
}
#if LANG_CXX11
inline void SendFile::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcp_msg.SendFile.filename)
}
#endif
inline void SendFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcp_msg.SendFile.filename)
}
inline void SendFile::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcp_msg.SendFile.filename)
}
inline ::std::string* SendFile::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:tcp_msg.SendFile.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFile::release_filename() {
  // @@protoc_insertion_point(field_release:tcp_msg.SendFile.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFile::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.SendFile.filename)
}

// bytes content = 4;
inline void SendFile::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SendFile::content() const {
  // @@protoc_insertion_point(field_get:tcp_msg.SendFile.content)
  return content_.GetNoArena();
}
inline void SendFile::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tcp_msg.SendFile.content)
}
#if LANG_CXX11
inline void SendFile::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tcp_msg.SendFile.content)
}
#endif
inline void SendFile::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tcp_msg.SendFile.content)
}
inline void SendFile::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tcp_msg.SendFile.content)
}
inline ::std::string* SendFile::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:tcp_msg.SendFile.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendFile::release_content() {
  // @@protoc_insertion_point(field_release:tcp_msg.SendFile.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendFile::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:tcp_msg.SendFile.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tcp_msg

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::tcp_msg::SendFile_FileType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tcp_msg::SendFile_FileType>() {
  return ::tcp_msg::SendFile_FileType_descriptor();
}
template <> struct is_proto_enum< ::tcp_msg::CmdType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tcp_msg::CmdType>() {
  return ::tcp_msg::CmdType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tcp_5fmsg_2ecmd_2eproto__INCLUDED
