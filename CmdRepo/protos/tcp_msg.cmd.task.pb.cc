// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_msg.cmd.task.proto

#include "tcp_msg.cmd.task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tcp_msg {
namespace task {
class ExecuteTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteTaskRequest>
      _instance;
} _ExecuteTaskRequest_default_instance_;
class ExecuteTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteTaskResponse>
      _instance;
} _ExecuteTaskResponse_default_instance_;
}  // namespace task
}  // namespace tcp_msg
namespace protobuf_tcp_5fmsg_2ecmd_2etask_2eproto {
void InitDefaultsExecuteTaskRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::task::_ExecuteTaskRequest_default_instance_;
    new (ptr) ::tcp_msg::task::ExecuteTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::task::ExecuteTaskRequest::InitAsDefaultInstance();
}

void InitDefaultsExecuteTaskRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExecuteTaskRequestImpl);
}

void InitDefaultsExecuteTaskResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::InitDefaultsCommonHeader();
  protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::InitDefaultsFeedbackInfo();
  {
    void* ptr = &::tcp_msg::task::_ExecuteTaskResponse_default_instance_;
    new (ptr) ::tcp_msg::task::ExecuteTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::task::ExecuteTaskResponse::InitAsDefaultInstance();
}

void InitDefaultsExecuteTaskResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExecuteTaskResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::task::ExecuteTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::task::ExecuteTaskRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::task::ExecuteTaskRequest, taskname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::task::ExecuteTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::task::ExecuteTaskResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::task::ExecuteTaskResponse, taskname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::task::ExecuteTaskResponse, result_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::task::ExecuteTaskResponse, result_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tcp_msg::task::ExecuteTaskRequest)},
  { 7, -1, sizeof(::tcp_msg::task::ExecuteTaskResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::task::_ExecuteTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::task::_ExecuteTaskResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tcp_msg.cmd.task.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026tcp_msg.cmd.task.proto\022\014tcp_msg.task\032\030"
      "tcp_msg.cmd.common.proto\"M\n\022ExecuteTaskR"
      "equest\022%\n\006header\030\001 \001(\0132\025.tcp_msg.CommonH"
      "eader\022\020\n\010taskname\030\002 \001(\t\"\246\001\n\023ExecuteTaskR"
      "esponse\022%\n\006header\030\001 \001(\0132\025.tcp_msg.Common"
      "Header\022\020\n\010taskname\030\002 \001(\t\022*\n\013result_type\030"
      "\003 \001(\0162\025.tcp_msg.FeedbackType\022*\n\013result_i"
      "nfo\030\004 \003(\0132\025.tcp_msg.FeedbackInfob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tcp_msg.cmd.task.proto", &protobuf_RegisterTypes);
  ::protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tcp_5fmsg_2ecmd_2etask_2eproto
namespace tcp_msg {
namespace task {

// ===================================================================

void ExecuteTaskRequest::InitAsDefaultInstance() {
  ::tcp_msg::task::_ExecuteTaskRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
void ExecuteTaskRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteTaskRequest::kHeaderFieldNumber;
const int ExecuteTaskRequest::kTasknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteTaskRequest::ExecuteTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::InitDefaultsExecuteTaskRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.task.ExecuteTaskRequest)
}
ExecuteTaskRequest::ExecuteTaskRequest(const ExecuteTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskname().size() > 0) {
    taskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tcp_msg.task.ExecuteTaskRequest)
}

void ExecuteTaskRequest::SharedCtor() {
  taskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

ExecuteTaskRequest::~ExecuteTaskRequest() {
  // @@protoc_insertion_point(destructor:tcp_msg.task.ExecuteTaskRequest)
  SharedDtor();
}

void ExecuteTaskRequest::SharedDtor() {
  taskname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ExecuteTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteTaskRequest::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteTaskRequest& ExecuteTaskRequest::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::InitDefaultsExecuteTaskRequest();
  return *internal_default_instance();
}

ExecuteTaskRequest* ExecuteTaskRequest::New(::google::protobuf::Arena* arena) const {
  ExecuteTaskRequest* n = new ExecuteTaskRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.task.ExecuteTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  taskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool ExecuteTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.task.ExecuteTaskRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string taskname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->taskname().data(), static_cast<int>(this->taskname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tcp_msg.task.ExecuteTaskRequest.taskname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.task.ExecuteTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.task.ExecuteTaskRequest)
  return false;
#undef DO_
}

void ExecuteTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.task.ExecuteTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string taskname = 2;
  if (this->taskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taskname().data(), static_cast<int>(this->taskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.task.ExecuteTaskRequest.taskname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->taskname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.task.ExecuteTaskRequest)
}

::google::protobuf::uint8* ExecuteTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.task.ExecuteTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // string taskname = 2;
  if (this->taskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taskname().data(), static_cast<int>(this->taskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.task.ExecuteTaskRequest.taskname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->taskname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.task.ExecuteTaskRequest)
  return target;
}

size_t ExecuteTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.task.ExecuteTaskRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string taskname = 2;
  if (this->taskname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskname());
  }

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.task.ExecuteTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.task.ExecuteTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.task.ExecuteTaskRequest)
    MergeFrom(*source);
  }
}

void ExecuteTaskRequest::MergeFrom(const ExecuteTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.task.ExecuteTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taskname().size() > 0) {

    taskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
}

void ExecuteTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.task.ExecuteTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteTaskRequest::CopyFrom(const ExecuteTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.task.ExecuteTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteTaskRequest::IsInitialized() const {
  return true;
}

void ExecuteTaskRequest::Swap(ExecuteTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteTaskRequest::InternalSwap(ExecuteTaskRequest* other) {
  using std::swap;
  taskname_.Swap(&other->taskname_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteTaskRequest::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExecuteTaskResponse::InitAsDefaultInstance() {
  ::tcp_msg::task::_ExecuteTaskResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
void ExecuteTaskResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void ExecuteTaskResponse::clear_result_info() {
  result_info_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteTaskResponse::kHeaderFieldNumber;
const int ExecuteTaskResponse::kTasknameFieldNumber;
const int ExecuteTaskResponse::kResultTypeFieldNumber;
const int ExecuteTaskResponse::kResultInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteTaskResponse::ExecuteTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::InitDefaultsExecuteTaskResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.task.ExecuteTaskResponse)
}
ExecuteTaskResponse::ExecuteTaskResponse(const ExecuteTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      result_info_(from.result_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.taskname().size() > 0) {
    taskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  result_type_ = from.result_type_;
  // @@protoc_insertion_point(copy_constructor:tcp_msg.task.ExecuteTaskResponse)
}

void ExecuteTaskResponse::SharedCtor() {
  taskname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(result_type_));
  _cached_size_ = 0;
}

ExecuteTaskResponse::~ExecuteTaskResponse() {
  // @@protoc_insertion_point(destructor:tcp_msg.task.ExecuteTaskResponse)
  SharedDtor();
}

void ExecuteTaskResponse::SharedDtor() {
  taskname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ExecuteTaskResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteTaskResponse::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteTaskResponse& ExecuteTaskResponse::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::InitDefaultsExecuteTaskResponse();
  return *internal_default_instance();
}

ExecuteTaskResponse* ExecuteTaskResponse::New(::google::protobuf::Arena* arena) const {
  ExecuteTaskResponse* n = new ExecuteTaskResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.task.ExecuteTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_info_.Clear();
  taskname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  result_type_ = 0;
  _internal_metadata_.Clear();
}

bool ExecuteTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.task.ExecuteTaskResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string taskname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->taskname().data(), static_cast<int>(this->taskname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tcp_msg.task.ExecuteTaskResponse.taskname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tcp_msg.FeedbackType result_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result_type(static_cast< ::tcp_msg::FeedbackType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tcp_msg.FeedbackInfo result_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.task.ExecuteTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.task.ExecuteTaskResponse)
  return false;
#undef DO_
}

void ExecuteTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.task.ExecuteTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string taskname = 2;
  if (this->taskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taskname().data(), static_cast<int>(this->taskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.task.ExecuteTaskResponse.taskname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->taskname(), output);
  }

  // .tcp_msg.FeedbackType result_type = 3;
  if (this->result_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result_type(), output);
  }

  // repeated .tcp_msg.FeedbackInfo result_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result_info(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.task.ExecuteTaskResponse)
}

::google::protobuf::uint8* ExecuteTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.task.ExecuteTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // string taskname = 2;
  if (this->taskname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->taskname().data(), static_cast<int>(this->taskname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.task.ExecuteTaskResponse.taskname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->taskname(), target);
  }

  // .tcp_msg.FeedbackType result_type = 3;
  if (this->result_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result_type(), target);
  }

  // repeated .tcp_msg.FeedbackInfo result_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->result_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->result_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.task.ExecuteTaskResponse)
  return target;
}

size_t ExecuteTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.task.ExecuteTaskResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tcp_msg.FeedbackInfo result_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->result_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->result_info(static_cast<int>(i)));
    }
  }

  // string taskname = 2;
  if (this->taskname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskname());
  }

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .tcp_msg.FeedbackType result_type = 3;
  if (this->result_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.task.ExecuteTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.task.ExecuteTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.task.ExecuteTaskResponse)
    MergeFrom(*source);
  }
}

void ExecuteTaskResponse::MergeFrom(const ExecuteTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.task.ExecuteTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_info_.MergeFrom(from.result_info_);
  if (from.taskname().size() > 0) {

    taskname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskname_);
  }
  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
  if (from.result_type() != 0) {
    set_result_type(from.result_type());
  }
}

void ExecuteTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.task.ExecuteTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteTaskResponse::CopyFrom(const ExecuteTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.task.ExecuteTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteTaskResponse::IsInitialized() const {
  return true;
}

void ExecuteTaskResponse::Swap(ExecuteTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteTaskResponse::InternalSwap(ExecuteTaskResponse* other) {
  using std::swap;
  result_info_.InternalSwap(&other->result_info_);
  taskname_.Swap(&other->taskname_);
  swap(header_, other->header_);
  swap(result_type_, other->result_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteTaskResponse::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2etask_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace task
}  // namespace tcp_msg

// @@protoc_insertion_point(global_scope)
