// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_msg.cmd.proto

#include "tcp_msg.cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tcp_msg {
class CommonHeaderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommonHeader>
      _instance;
} _CommonHeader_default_instance_;
class IdentifyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IdentifyRequest>
      _instance;
} _IdentifyRequest_default_instance_;
class IdentityResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IdentityResponse>
      _instance;
} _IdentityResponse_default_instance_;
class StartUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartUpdate>
      _instance;
} _StartUpdate_default_instance_;
class FinishUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FinishUpdate>
      _instance;
} _FinishUpdate_default_instance_;
class SendFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendFile>
      _instance;
} _SendFile_default_instance_;
}  // namespace tcp_msg
namespace protobuf_tcp_5fmsg_2ecmd_2eproto {
void InitDefaultsCommonHeaderImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tcp_msg::_CommonHeader_default_instance_;
    new (ptr) ::tcp_msg::CommonHeader();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::CommonHeader::InitAsDefaultInstance();
}

void InitDefaultsCommonHeader() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommonHeaderImpl);
}

void InitDefaultsIdentifyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::_IdentifyRequest_default_instance_;
    new (ptr) ::tcp_msg::IdentifyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::IdentifyRequest::InitAsDefaultInstance();
}

void InitDefaultsIdentifyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIdentifyRequestImpl);
}

void InitDefaultsIdentityResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::_IdentityResponse_default_instance_;
    new (ptr) ::tcp_msg::IdentityResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::IdentityResponse::InitAsDefaultInstance();
}

void InitDefaultsIdentityResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIdentityResponseImpl);
}

void InitDefaultsStartUpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::_StartUpdate_default_instance_;
    new (ptr) ::tcp_msg::StartUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::StartUpdate::InitAsDefaultInstance();
}

void InitDefaultsStartUpdate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStartUpdateImpl);
}

void InitDefaultsFinishUpdateImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::_FinishUpdate_default_instance_;
    new (ptr) ::tcp_msg::FinishUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::FinishUpdate::InitAsDefaultInstance();
}

void InitDefaultsFinishUpdate() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFinishUpdateImpl);
}

void InitDefaultsSendFileImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::_SendFile_default_instance_;
    new (ptr) ::tcp_msg::SendFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::SendFile::InitAsDefaultInstance();
}

void InitDefaultsSendFile() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSendFileImpl);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::CommonHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::CommonHeader, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::IdentifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::IdentifyRequest, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::IdentityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::IdentityResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::IdentityResponse, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::StartUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::StartUpdate, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::FinishUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::FinishUpdate, header_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::SendFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::SendFile, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::SendFile, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::SendFile, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::SendFile, content_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tcp_msg::CommonHeader)},
  { 6, -1, sizeof(::tcp_msg::IdentifyRequest)},
  { 12, -1, sizeof(::tcp_msg::IdentityResponse)},
  { 19, -1, sizeof(::tcp_msg::StartUpdate)},
  { 25, -1, sizeof(::tcp_msg::FinishUpdate)},
  { 31, -1, sizeof(::tcp_msg::SendFile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::_CommonHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::_IdentifyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::_IdentityResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::_StartUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::_FinishUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::_SendFile_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tcp_msg.cmd.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021tcp_msg.cmd.proto\022\007tcp_msg\".\n\014CommonHe"
      "ader\022\036\n\004type\030\001 \001(\0162\020.tcp_msg.CmdType\"8\n\017"
      "IdentifyRequest\022%\n\006header\030\001 \001(\0132\025.tcp_ms"
      "g.CommonHeader\"E\n\020IdentityResponse\022%\n\006he"
      "ader\030\001 \001(\0132\025.tcp_msg.CommonHeader\022\n\n\002id\030"
      "\002 \001(\005\"4\n\013StartUpdate\022%\n\006header\030\001 \001(\0132\025.t"
      "cp_msg.CommonHeader\"5\n\014FinishUpdate\022%\n\006h"
      "eader\030\001 \001(\0132\025.tcp_msg.CommonHeader\"\240\001\n\010S"
      "endFile\022%\n\006header\030\001 \001(\0132\025.tcp_msg.Common"
      "Header\022(\n\004type\030\002 \001(\0162\032.tcp_msg.SendFile."
      "FileType\022\020\n\010filename\030\003 \001(\t\022\017\n\007content\030\004 "
      "\001(\014\" \n\010FileType\022\n\n\006SYSTEM\020\000\022\010\n\004TEMP\020\001*.\n"
      "\007CmdType\022\020\n\014START_UPDATE\020\000\022\021\n\rFINISH_UPD"
      "ATE\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 533);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tcp_msg.cmd.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tcp_5fmsg_2ecmd_2eproto
namespace tcp_msg {
const ::google::protobuf::EnumDescriptor* SendFile_FileType_descriptor() {
  protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_enum_descriptors[0];
}
bool SendFile_FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SendFile_FileType SendFile::SYSTEM;
const SendFile_FileType SendFile::TEMP;
const SendFile_FileType SendFile::FileType_MIN;
const SendFile_FileType SendFile::FileType_MAX;
const int SendFile::FileType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CmdType_descriptor() {
  protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_enum_descriptors[1];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CommonHeader::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommonHeader::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommonHeader::CommonHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsCommonHeader();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.CommonHeader)
}
CommonHeader::CommonHeader(const CommonHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tcp_msg.CommonHeader)
}

void CommonHeader::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

CommonHeader::~CommonHeader() {
  // @@protoc_insertion_point(destructor:tcp_msg.CommonHeader)
  SharedDtor();
}

void CommonHeader::SharedDtor() {
}

void CommonHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonHeader::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommonHeader& CommonHeader::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsCommonHeader();
  return *internal_default_instance();
}

CommonHeader* CommonHeader::New(::google::protobuf::Arena* arena) const {
  CommonHeader* n = new CommonHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommonHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

bool CommonHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.CommonHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CmdType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::tcp_msg::CmdType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.CommonHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.CommonHeader)
  return false;
#undef DO_
}

void CommonHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CmdType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.CommonHeader)
}

::google::protobuf::uint8* CommonHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.CommonHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CmdType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.CommonHeader)
  return target;
}

size_t CommonHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.CommonHeader)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tcp_msg.CmdType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.CommonHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CommonHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommonHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.CommonHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.CommonHeader)
    MergeFrom(*source);
  }
}

void CommonHeader::MergeFrom(const CommonHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.CommonHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void CommonHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.CommonHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonHeader::CopyFrom(const CommonHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.CommonHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonHeader::IsInitialized() const {
  return true;
}

void CommonHeader::Swap(CommonHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommonHeader::InternalSwap(CommonHeader* other) {
  using std::swap;
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommonHeader::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IdentifyRequest::InitAsDefaultInstance() {
  ::tcp_msg::_IdentifyRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdentifyRequest::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentifyRequest::IdentifyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsIdentifyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.IdentifyRequest)
}
IdentifyRequest::IdentifyRequest(const IdentifyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tcp_msg.IdentifyRequest)
}

void IdentifyRequest::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

IdentifyRequest::~IdentifyRequest() {
  // @@protoc_insertion_point(destructor:tcp_msg.IdentifyRequest)
  SharedDtor();
}

void IdentifyRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void IdentifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdentifyRequest::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdentifyRequest& IdentifyRequest::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsIdentifyRequest();
  return *internal_default_instance();
}

IdentifyRequest* IdentifyRequest::New(::google::protobuf::Arena* arena) const {
  IdentifyRequest* n = new IdentifyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdentifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.IdentifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool IdentifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.IdentifyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.IdentifyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.IdentifyRequest)
  return false;
#undef DO_
}

void IdentifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.IdentifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.IdentifyRequest)
}

::google::protobuf::uint8* IdentifyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.IdentifyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.IdentifyRequest)
  return target;
}

size_t IdentifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.IdentifyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdentifyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.IdentifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentifyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdentifyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.IdentifyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.IdentifyRequest)
    MergeFrom(*source);
  }
}

void IdentifyRequest::MergeFrom(const IdentifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.IdentifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
}

void IdentifyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.IdentifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentifyRequest::CopyFrom(const IdentifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.IdentifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentifyRequest::IsInitialized() const {
  return true;
}

void IdentifyRequest::Swap(IdentifyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentifyRequest::InternalSwap(IdentifyRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdentifyRequest::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IdentityResponse::InitAsDefaultInstance() {
  ::tcp_msg::_IdentityResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdentityResponse::kHeaderFieldNumber;
const int IdentityResponse::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdentityResponse::IdentityResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsIdentityResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.IdentityResponse)
}
IdentityResponse::IdentityResponse(const IdentityResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:tcp_msg.IdentityResponse)
}

void IdentityResponse::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
  _cached_size_ = 0;
}

IdentityResponse::~IdentityResponse() {
  // @@protoc_insertion_point(destructor:tcp_msg.IdentityResponse)
  SharedDtor();
}

void IdentityResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void IdentityResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdentityResponse::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IdentityResponse& IdentityResponse::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsIdentityResponse();
  return *internal_default_instance();
}

IdentityResponse* IdentityResponse::New(::google::protobuf::Arena* arena) const {
  IdentityResponse* n = new IdentityResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdentityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.IdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  id_ = 0;
  _internal_metadata_.Clear();
}

bool IdentityResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.IdentityResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.IdentityResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.IdentityResponse)
  return false;
#undef DO_
}

void IdentityResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.IdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.IdentityResponse)
}

::google::protobuf::uint8* IdentityResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.IdentityResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.IdentityResponse)
  return target;
}

size_t IdentityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.IdentityResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdentityResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.IdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentityResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IdentityResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.IdentityResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.IdentityResponse)
    MergeFrom(*source);
  }
}

void IdentityResponse::MergeFrom(const IdentityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.IdentityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void IdentityResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.IdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentityResponse::CopyFrom(const IdentityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.IdentityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentityResponse::IsInitialized() const {
  return true;
}

void IdentityResponse::Swap(IdentityResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdentityResponse::InternalSwap(IdentityResponse* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdentityResponse::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartUpdate::InitAsDefaultInstance() {
  ::tcp_msg::_StartUpdate_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartUpdate::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartUpdate::StartUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsStartUpdate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.StartUpdate)
}
StartUpdate::StartUpdate(const StartUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tcp_msg.StartUpdate)
}

void StartUpdate::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

StartUpdate::~StartUpdate() {
  // @@protoc_insertion_point(destructor:tcp_msg.StartUpdate)
  SharedDtor();
}

void StartUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void StartUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartUpdate::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartUpdate& StartUpdate::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsStartUpdate();
  return *internal_default_instance();
}

StartUpdate* StartUpdate::New(::google::protobuf::Arena* arena) const {
  StartUpdate* n = new StartUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.StartUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool StartUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.StartUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.StartUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.StartUpdate)
  return false;
#undef DO_
}

void StartUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.StartUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.StartUpdate)
}

::google::protobuf::uint8* StartUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.StartUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.StartUpdate)
  return target;
}

size_t StartUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.StartUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.StartUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const StartUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.StartUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.StartUpdate)
    MergeFrom(*source);
  }
}

void StartUpdate::MergeFrom(const StartUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.StartUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
}

void StartUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.StartUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartUpdate::CopyFrom(const StartUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.StartUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpdate::IsInitialized() const {
  return true;
}

void StartUpdate::Swap(StartUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartUpdate::InternalSwap(StartUpdate* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartUpdate::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FinishUpdate::InitAsDefaultInstance() {
  ::tcp_msg::_FinishUpdate_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinishUpdate::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishUpdate::FinishUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsFinishUpdate();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.FinishUpdate)
}
FinishUpdate::FinishUpdate(const FinishUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tcp_msg.FinishUpdate)
}

void FinishUpdate::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

FinishUpdate::~FinishUpdate() {
  // @@protoc_insertion_point(destructor:tcp_msg.FinishUpdate)
  SharedDtor();
}

void FinishUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void FinishUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishUpdate::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishUpdate& FinishUpdate::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsFinishUpdate();
  return *internal_default_instance();
}

FinishUpdate* FinishUpdate::New(::google::protobuf::Arena* arena) const {
  FinishUpdate* n = new FinishUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FinishUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.FinishUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool FinishUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.FinishUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.FinishUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.FinishUpdate)
  return false;
#undef DO_
}

void FinishUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.FinishUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.FinishUpdate)
}

::google::protobuf::uint8* FinishUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.FinishUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.FinishUpdate)
  return target;
}

size_t FinishUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.FinishUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.FinishUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.FinishUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.FinishUpdate)
    MergeFrom(*source);
  }
}

void FinishUpdate::MergeFrom(const FinishUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.FinishUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
}

void FinishUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.FinishUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishUpdate::CopyFrom(const FinishUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.FinishUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishUpdate::IsInitialized() const {
  return true;
}

void FinishUpdate::Swap(FinishUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishUpdate::InternalSwap(FinishUpdate* other) {
  using std::swap;
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FinishUpdate::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendFile::InitAsDefaultInstance() {
  ::tcp_msg::_SendFile_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendFile::kHeaderFieldNumber;
const int SendFile::kTypeFieldNumber;
const int SendFile::kFilenameFieldNumber;
const int SendFile::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendFile::SendFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsSendFile();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.SendFile)
}
SendFile::SendFile(const SendFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:tcp_msg.SendFile)
}

void SendFile::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
  _cached_size_ = 0;
}

SendFile::~SendFile() {
  // @@protoc_insertion_point(destructor:tcp_msg.SendFile)
  SharedDtor();
}

void SendFile::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SendFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFile::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendFile& SendFile::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2eproto::InitDefaultsSendFile();
  return *internal_default_instance();
}

SendFile* SendFile::New(::google::protobuf::Arena* arena) const {
  SendFile* n = new SendFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.SendFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  type_ = 0;
  _internal_metadata_.Clear();
}

bool SendFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.SendFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tcp_msg.SendFile.FileType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::tcp_msg::SendFile_FileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tcp_msg.SendFile.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.SendFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.SendFile)
  return false;
#undef DO_
}

void SendFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.SendFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .tcp_msg.SendFile.FileType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.SendFile.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.SendFile)
}

::google::protobuf::uint8* SendFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.SendFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .tcp_msg.SendFile.FileType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.SendFile.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.SendFile)
  return target;
}

size_t SendFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.SendFile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // bytes content = 4;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .tcp_msg.SendFile.FileType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.SendFile)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.SendFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.SendFile)
    MergeFrom(*source);
  }
}

void SendFile::MergeFrom(const SendFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.SendFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SendFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.SendFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFile::CopyFrom(const SendFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.SendFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFile::IsInitialized() const {
  return true;
}

void SendFile::Swap(SendFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendFile::InternalSwap(SendFile* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  content_.Swap(&other->content_);
  swap(header_, other->header_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendFile::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tcp_msg

// @@protoc_insertion_point(global_scope)
