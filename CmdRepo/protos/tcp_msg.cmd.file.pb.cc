// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcp_msg.cmd.file.proto

#include "tcp_msg.cmd.file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace tcp_msg {
namespace file {
class FileListRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileListRequest>
      _instance;
} _FileListRequest_default_instance_;
class FileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileInfo>
      _instance;
} _FileInfo_default_instance_;
class FileListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileListResponse>
      _instance;
} _FileListResponse_default_instance_;
class SendFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendFileRequest>
      _instance;
} _SendFileRequest_default_instance_;
class SendFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendFileResponse>
      _instance;
} _SendFileResponse_default_instance_;
}  // namespace file
}  // namespace tcp_msg
namespace protobuf_tcp_5fmsg_2ecmd_2efile_2eproto {
void InitDefaultsFileListRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::file::_FileListRequest_default_instance_;
    new (ptr) ::tcp_msg::file::FileListRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::file::FileListRequest::InitAsDefaultInstance();
}

void InitDefaultsFileListRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFileListRequestImpl);
}

void InitDefaultsFileInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::tcp_msg::file::_FileInfo_default_instance_;
    new (ptr) ::tcp_msg::file::FileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::file::FileInfo::InitAsDefaultInstance();
}

void InitDefaultsFileInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFileInfoImpl);
}

void InitDefaultsFileListResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::InitDefaultsCommonHeader();
  protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileInfo();
  {
    void* ptr = &::tcp_msg::file::_FileListResponse_default_instance_;
    new (ptr) ::tcp_msg::file::FileListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::file::FileListResponse::InitAsDefaultInstance();
}

void InitDefaultsFileListResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFileListResponseImpl);
}

void InitDefaultsSendFileRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::file::_SendFileRequest_default_instance_;
    new (ptr) ::tcp_msg::file::SendFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::file::SendFileRequest::InitAsDefaultInstance();
}

void InitDefaultsSendFileRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSendFileRequestImpl);
}

void InitDefaultsSendFileResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::InitDefaultsCommonHeader();
  {
    void* ptr = &::tcp_msg::file::_SendFileResponse_default_instance_;
    new (ptr) ::tcp_msg::file::SendFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::tcp_msg::file::SendFileResponse::InitAsDefaultInstance();
}

void InitDefaultsSendFileResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSendFileResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileListRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileListRequest, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileInfo, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileInfo, filesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileInfo, checksum_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileListResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::FileListResponse, fileinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileRequest, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileRequest, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileRequest, start_pos_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileResponse, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileResponse, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileResponse, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::tcp_msg::file::SendFileResponse, residue_length_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::tcp_msg::file::FileListRequest)},
  { 7, -1, sizeof(::tcp_msg::file::FileInfo)},
  { 15, -1, sizeof(::tcp_msg::file::FileListResponse)},
  { 22, -1, sizeof(::tcp_msg::file::SendFileRequest)},
  { 30, -1, sizeof(::tcp_msg::file::SendFileResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::file::_FileListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::file::_FileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::file::_FileListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::file::_SendFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::tcp_msg::file::_SendFileResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "tcp_msg.cmd.file.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026tcp_msg.cmd.file.proto\022\014tcp_msg.file\032\030"
      "tcp_msg.cmd.common.proto\"D\n\017FileListRequ"
      "est\022%\n\006header\030\001 \001(\0132\025.tcp_msg.CommonHead"
      "er\022\n\n\002id\030\002 \001(\005\"@\n\010FileInfo\022\020\n\010filename\030\001"
      " \001(\t\022\020\n\010filesize\030\002 \001(\003\022\020\n\010checksum\030\003 \001(\014"
      "\"c\n\020FileListResponse\022%\n\006header\030\001 \001(\0132\025.t"
      "cp_msg.CommonHeader\022(\n\010fileinfo\030\002 \003(\0132\026."
      "tcp_msg.file.FileInfo\"]\n\017SendFileRequest"
      "\022%\n\006header\030\001 \001(\0132\025.tcp_msg.CommonHeader\022"
      "\020\n\010filename\030\002 \001(\t\022\021\n\tstart_pos\030\003 \001(\t\"\364\002\n"
      "\020SendFileResponse\022%\n\006header\030\001 \001(\0132\025.tcp_"
      "msg.CommonHeader\022=\n\006result\030\002 \001(\0162-.tcp_m"
      "sg.file.SendFileResponse.SendFileResult\022"
      "5\n\004type\030\003 \001(\0162\'.tcp_msg.file.SendFileRes"
      "ponse.FileType\022\020\n\010filename\030\004 \001(\t\022\017\n\007cont"
      "ent\030\005 \001(\014\022\026\n\016residue_length\030\006 \001(\003\"6\n\010Fil"
      "eType\022\024\n\020UNKNOW_FILE_TYPE\020\000\022\n\n\006SYSTEM\020\001\022"
      "\010\n\004TEMP\020\002\"P\n\016SendFileResult\022\033\n\027UNKNOW_SE"
      "ND_FILE_RESULT\020\000\022\014\n\010NOTFOUND\020\001\022\t\n\005WHOLE\020"
      "\002\022\010\n\004PART\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 779);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tcp_msg.cmd.file.proto", &protobuf_RegisterTypes);
  ::protobuf_tcp_5fmsg_2ecmd_2ecommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_tcp_5fmsg_2ecmd_2efile_2eproto
namespace tcp_msg {
namespace file {
const ::google::protobuf::EnumDescriptor* SendFileResponse_FileType_descriptor() {
  protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_enum_descriptors[0];
}
bool SendFileResponse_FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SendFileResponse_FileType SendFileResponse::UNKNOW_FILE_TYPE;
const SendFileResponse_FileType SendFileResponse::SYSTEM;
const SendFileResponse_FileType SendFileResponse::TEMP;
const SendFileResponse_FileType SendFileResponse::FileType_MIN;
const SendFileResponse_FileType SendFileResponse::FileType_MAX;
const int SendFileResponse::FileType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* SendFileResponse_SendFileResult_descriptor() {
  protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_enum_descriptors[1];
}
bool SendFileResponse_SendFileResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SendFileResponse_SendFileResult SendFileResponse::UNKNOW_SEND_FILE_RESULT;
const SendFileResponse_SendFileResult SendFileResponse::NOTFOUND;
const SendFileResponse_SendFileResult SendFileResponse::WHOLE;
const SendFileResponse_SendFileResult SendFileResponse::PART;
const SendFileResponse_SendFileResult SendFileResponse::SendFileResult_MIN;
const SendFileResponse_SendFileResult SendFileResponse::SendFileResult_MAX;
const int SendFileResponse::SendFileResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void FileListRequest::InitAsDefaultInstance() {
  ::tcp_msg::file::_FileListRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
void FileListRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileListRequest::kHeaderFieldNumber;
const int FileListRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileListRequest::FileListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileListRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.file.FileListRequest)
}
FileListRequest::FileListRequest(const FileListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:tcp_msg.file.FileListRequest)
}

void FileListRequest::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(id_));
  _cached_size_ = 0;
}

FileListRequest::~FileListRequest() {
  // @@protoc_insertion_point(destructor:tcp_msg.file.FileListRequest)
  SharedDtor();
}

void FileListRequest::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void FileListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileListRequest::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileListRequest& FileListRequest::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileListRequest();
  return *internal_default_instance();
}

FileListRequest* FileListRequest::New(::google::protobuf::Arena* arena) const {
  FileListRequest* n = new FileListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.file.FileListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  id_ = 0;
  _internal_metadata_.Clear();
}

bool FileListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.file.FileListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.file.FileListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.file.FileListRequest)
  return false;
#undef DO_
}

void FileListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.file.FileListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.file.FileListRequest)
}

::google::protobuf::uint8* FileListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.file.FileListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.file.FileListRequest)
  return target;
}

size_t FileListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.file.FileListRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.file.FileListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FileListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.file.FileListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.file.FileListRequest)
    MergeFrom(*source);
  }
}

void FileListRequest::MergeFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.file.FileListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void FileListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.file.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileListRequest::CopyFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.file.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileListRequest::IsInitialized() const {
  return true;
}

void FileListRequest::Swap(FileListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileListRequest::InternalSwap(FileListRequest* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileListRequest::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfo::kFilenameFieldNumber;
const int FileInfo::kFilesizeFieldNumber;
const int FileInfo::kChecksumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfo::FileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.file.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.checksum().size() > 0) {
    checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_);
  }
  filesize_ = from.filesize_;
  // @@protoc_insertion_point(copy_constructor:tcp_msg.file.FileInfo)
}

void FileInfo::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesize_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:tcp_msg.file.FileInfo)
  SharedDtor();
}

void FileInfo::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileInfo::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileInfo& FileInfo::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileInfo();
  return *internal_default_instance();
}

FileInfo* FileInfo::New(::google::protobuf::Arena* arena) const {
  FileInfo* n = new FileInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.file.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checksum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  filesize_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.file.FileInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tcp_msg.file.FileInfo.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 filesize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &filesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes checksum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_checksum()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.file.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.file.FileInfo)
  return false;
#undef DO_
}

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.file.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.file.FileInfo.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // int64 filesize = 2;
  if (this->filesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->filesize(), output);
  }

  // bytes checksum = 3;
  if (this->checksum().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->checksum(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.file.FileInfo)
}

::google::protobuf::uint8* FileInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.file.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.file.FileInfo.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // int64 filesize = 2;
  if (this->filesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->filesize(), target);
  }

  // bytes checksum = 3;
  if (this->checksum().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->checksum(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.file.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.file.FileInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // bytes checksum = 3;
  if (this->checksum().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->checksum());
  }

  // int64 filesize = 2;
  if (this->filesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->filesize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.file.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.file.FileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.file.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.file.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.checksum().size() > 0) {

    checksum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum_);
  }
  if (from.filesize() != 0) {
    set_filesize(from.filesize());
  }
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.file.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.file.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  checksum_.Swap(&other->checksum_);
  swap(filesize_, other->filesize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileListResponse::InitAsDefaultInstance() {
  ::tcp_msg::file::_FileListResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
void FileListResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileListResponse::kHeaderFieldNumber;
const int FileListResponse::kFileinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileListResponse::FileListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileListResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.file.FileListResponse)
}
FileListResponse::FileListResponse(const FileListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fileinfo_(from.fileinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tcp_msg.file.FileListResponse)
}

void FileListResponse::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

FileListResponse::~FileListResponse() {
  // @@protoc_insertion_point(destructor:tcp_msg.file.FileListResponse)
  SharedDtor();
}

void FileListResponse::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void FileListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileListResponse::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileListResponse& FileListResponse::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsFileListResponse();
  return *internal_default_instance();
}

FileListResponse* FileListResponse::New(::google::protobuf::Arena* arena) const {
  FileListResponse* n = new FileListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.file.FileListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fileinfo_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool FileListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.file.FileListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tcp_msg.file.FileInfo fileinfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fileinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.file.FileListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.file.FileListResponse)
  return false;
#undef DO_
}

void FileListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.file.FileListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .tcp_msg.file.FileInfo fileinfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fileinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fileinfo(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.file.FileListResponse)
}

::google::protobuf::uint8* FileListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.file.FileListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .tcp_msg.file.FileInfo fileinfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fileinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->fileinfo(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.file.FileListResponse)
  return target;
}

size_t FileListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.file.FileListResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .tcp_msg.file.FileInfo fileinfo = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fileinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fileinfo(static_cast<int>(i)));
    }
  }

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.file.FileListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FileListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.file.FileListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.file.FileListResponse)
    MergeFrom(*source);
  }
}

void FileListResponse::MergeFrom(const FileListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.file.FileListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fileinfo_.MergeFrom(from.fileinfo_);
  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
}

void FileListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.file.FileListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileListResponse::CopyFrom(const FileListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.file.FileListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileListResponse::IsInitialized() const {
  return true;
}

void FileListResponse::Swap(FileListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileListResponse::InternalSwap(FileListResponse* other) {
  using std::swap;
  fileinfo_.InternalSwap(&other->fileinfo_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileListResponse::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendFileRequest::InitAsDefaultInstance() {
  ::tcp_msg::file::_SendFileRequest_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
void SendFileRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendFileRequest::kHeaderFieldNumber;
const int SendFileRequest::kFilenameFieldNumber;
const int SendFileRequest::kStartPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendFileRequest::SendFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsSendFileRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.file.SendFileRequest)
}
SendFileRequest::SendFileRequest(const SendFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.start_pos().size() > 0) {
    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:tcp_msg.file.SendFileRequest)
}

void SendFileRequest::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  _cached_size_ = 0;
}

SendFileRequest::~SendFileRequest() {
  // @@protoc_insertion_point(destructor:tcp_msg.file.SendFileRequest)
  SharedDtor();
}

void SendFileRequest::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SendFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFileRequest::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendFileRequest& SendFileRequest::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsSendFileRequest();
  return *internal_default_instance();
}

SendFileRequest* SendFileRequest::New(::google::protobuf::Arena* arena) const {
  SendFileRequest* n = new SendFileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.file.SendFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_pos_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool SendFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.file.SendFileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tcp_msg.file.SendFileRequest.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string start_pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_pos()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->start_pos().data(), static_cast<int>(this->start_pos().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tcp_msg.file.SendFileRequest.start_pos"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.file.SendFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.file.SendFileRequest)
  return false;
#undef DO_
}

void SendFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.file.SendFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.file.SendFileRequest.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  // string start_pos = 3;
  if (this->start_pos().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.file.SendFileRequest.start_pos");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->start_pos(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.file.SendFileRequest)
}

::google::protobuf::uint8* SendFileRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.file.SendFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // string filename = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.file.SendFileRequest.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  // string start_pos = 3;
  if (this->start_pos().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->start_pos().data(), static_cast<int>(this->start_pos().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.file.SendFileRequest.start_pos");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->start_pos(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.file.SendFileRequest)
  return target;
}

size_t SendFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.file.SendFileRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string start_pos = 3;
  if (this->start_pos().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->start_pos());
  }

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.file.SendFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFileRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendFileRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.file.SendFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.file.SendFileRequest)
    MergeFrom(*source);
  }
}

void SendFileRequest::MergeFrom(const SendFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.file.SendFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.start_pos().size() > 0) {

    start_pos_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.start_pos_);
  }
  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
}

void SendFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.file.SendFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFileRequest::CopyFrom(const SendFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.file.SendFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFileRequest::IsInitialized() const {
  return true;
}

void SendFileRequest::Swap(SendFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendFileRequest::InternalSwap(SendFileRequest* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  start_pos_.Swap(&other->start_pos_);
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendFileRequest::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendFileResponse::InitAsDefaultInstance() {
  ::tcp_msg::file::_SendFileResponse_default_instance_._instance.get_mutable()->header_ = const_cast< ::tcp_msg::CommonHeader*>(
      ::tcp_msg::CommonHeader::internal_default_instance());
}
void SendFileResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendFileResponse::kHeaderFieldNumber;
const int SendFileResponse::kResultFieldNumber;
const int SendFileResponse::kTypeFieldNumber;
const int SendFileResponse::kFilenameFieldNumber;
const int SendFileResponse::kContentFieldNumber;
const int SendFileResponse::kResidueLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendFileResponse::SendFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsSendFileResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tcp_msg.file.SendFileResponse)
}
SendFileResponse::SendFileResponse(const SendFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.content().size() > 0) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_header()) {
    header_ = new ::tcp_msg::CommonHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&residue_length_) -
    reinterpret_cast<char*>(&result_)) + sizeof(residue_length_));
  // @@protoc_insertion_point(copy_constructor:tcp_msg.file.SendFileResponse)
}

void SendFileResponse::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&residue_length_) -
      reinterpret_cast<char*>(&header_)) + sizeof(residue_length_));
  _cached_size_ = 0;
}

SendFileResponse::~SendFileResponse() {
  // @@protoc_insertion_point(destructor:tcp_msg.file.SendFileResponse)
  SharedDtor();
}

void SendFileResponse::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void SendFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendFileResponse::descriptor() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendFileResponse& SendFileResponse::default_instance() {
  ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::InitDefaultsSendFileResponse();
  return *internal_default_instance();
}

SendFileResponse* SendFileResponse::New(::google::protobuf::Arena* arena) const {
  SendFileResponse* n = new SendFileResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tcp_msg.file.SendFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&residue_length_) -
      reinterpret_cast<char*>(&result_)) + sizeof(residue_length_));
  _internal_metadata_.Clear();
}

bool SendFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tcp_msg.file.SendFileResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tcp_msg.CommonHeader header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tcp_msg.file.SendFileResponse.SendFileResult result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::tcp_msg::file::SendFileResponse_SendFileResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tcp_msg.file.SendFileResponse.FileType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::tcp_msg::file::SendFileResponse_FileType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tcp_msg.file.SendFileResponse.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes content = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 residue_length = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &residue_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tcp_msg.file.SendFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tcp_msg.file.SendFileResponse)
  return false;
#undef DO_
}

void SendFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tcp_msg.file.SendFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .tcp_msg.file.SendFileResponse.SendFileResult result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // .tcp_msg.file.SendFileResponse.FileType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string filename = 4;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.file.SendFileResponse.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  // bytes content = 5;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->content(), output);
  }

  // int64 residue_length = 6;
  if (this->residue_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->residue_length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:tcp_msg.file.SendFileResponse)
}

::google::protobuf::uint8* SendFileResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tcp_msg.file.SendFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->header_, deterministic, target);
  }

  // .tcp_msg.file.SendFileResponse.SendFileResult result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // .tcp_msg.file.SendFileResponse.FileType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // string filename = 4;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tcp_msg.file.SendFileResponse.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // bytes content = 5;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->content(), target);
  }

  // int64 residue_length = 6;
  if (this->residue_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->residue_length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tcp_msg.file.SendFileResponse)
  return target;
}

size_t SendFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tcp_msg.file.SendFileResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 4;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // bytes content = 5;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  // .tcp_msg.CommonHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->header_);
  }

  // .tcp_msg.file.SendFileResponse.SendFileResult result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  // .tcp_msg.file.SendFileResponse.FileType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int64 residue_length = 6;
  if (this->residue_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->residue_length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tcp_msg.file.SendFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendFileResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendFileResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tcp_msg.file.SendFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tcp_msg.file.SendFileResponse)
    MergeFrom(*source);
  }
}

void SendFileResponse::MergeFrom(const SendFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tcp_msg.file.SendFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  if (from.has_header()) {
    mutable_header()->::tcp_msg::CommonHeader::MergeFrom(from.header());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.residue_length() != 0) {
    set_residue_length(from.residue_length());
  }
}

void SendFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tcp_msg.file.SendFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendFileResponse::CopyFrom(const SendFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tcp_msg.file.SendFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendFileResponse::IsInitialized() const {
  return true;
}

void SendFileResponse::Swap(SendFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendFileResponse::InternalSwap(SendFileResponse* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  content_.Swap(&other->content_);
  swap(header_, other->header_);
  swap(result_, other->result_);
  swap(type_, other->type_);
  swap(residue_length_, other->residue_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendFileResponse::GetMetadata() const {
  protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_tcp_5fmsg_2ecmd_2efile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace file
}  // namespace tcp_msg

// @@protoc_insertion_point(global_scope)
